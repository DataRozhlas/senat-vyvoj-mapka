// Generated by LiveScript 1.6.0
(function(){
  var Senat;
  window.ig.Senat = Senat = (function(){
    Senat.displayName = 'Senat';
    var prototype = Senat.prototype, constructor = Senat;
    Senat.prototype.kostSide = 35;
    function Senat(baseElement, data){
      this.baseElement = baseElement;
      this.data = data;
      this.first = true;
      this.init();
      this.drawTime(new Date().getTime());
    }
    Senat.prototype.drawTime = function(time){
      var res$, obvodId, ref$, obvod, i$, len$, senator, changed, x$, target, this$ = this;
      res$ = [];
      for (obvodId in ref$ = this.data) {
        obvod = ref$[obvodId];
        obvod.usableSenator = null;
        for (i$ = 0, len$ = obvod.length; i$ < len$; ++i$) {
          senator = obvod[i$];
          if (senator.time <= time) {
            obvod.usableSenator = senator;
          } else {
            break;
          }
        }
        if (obvod.usableSenator !== obvod.lastUsableSenator) {
          obvod.senatorChanged = true;
          obvod.lastUsableSenator = obvod.usableSenator;
        } else {
          obvod.senatorChanged = false;
        }
        res$.push(obvod.usableSenator);
      }
      this.currentMandaty = res$;
      changed = this.mandaty.filter(function(it){
        return this$.data[it.properties.obvod].senatorChanged;
      });
      x$ = changed;
      x$.attr('data-tooltip', function(it){
        var d;
        d = this$.data[it.properties.obvod].usableSenator;
        return "<b>" + d.vitez + "</b><br>" + d.vitezStrana + "<br><em>Obvod ƒç. " + it.properties.obvod + " &ndash; " + ig.obvodyNazvy[it.properties.obvod] + "</em>";
      });
      target = this.first
        ? changed
        : changed.transition().duration(400);
      this.first = false;
      return target.attr('fill', function(it){
        //console.log(this$.data[it.properties.obvod].usableSenator);
        return this$.data[it.properties.obvod].usableSenator.strana.color;
      });
    };
    Senat.prototype.init = function(){
      var rows, width, features, ref$, height, projection, x$, path, y$, z$, z1$, z2$, prahaFeatures, i$, len$, feature, z3$, z4$, z5$, brnoFeatures, z6$, z7$, z8$, ostravaFeatures, z9$, z10$, z11$, mesto, z12$, results$ = [];
      rows = 5;
      width = 390;
      features = topojson.feature(window.ig.data.mapa, window.ig.data.mapa.objects["data"]).features;
      ref$ = ig.utils.geo.getFittingProjection(features, width), width = ref$.width, height = ref$.height, projection = ref$.projection;
      x$ = path = d3.geo.path();
      x$.projection(projection);
      y$ = this.svg = this.baseElement.append('svg');
      y$.attr('width', 610);
      y$.attr('height', 310);
      z$ = this.svg;
      z1$ = z$.append('g').attr('class', 'republic');
      z2$ = z1$.selectAll('path').data(features).enter().append('path');
      z2$.attr('d', path);
      prahaFeatures = topojson.feature(window.ig.data.praha, window.ig.data.praha.objects["data"]).features;
      for (i$ = 0, len$ = prahaFeatures.length; i$ < len$; ++i$) {
        feature = prahaFeatures[i$];
        feature.properties.obvod = feature.properties.senat_obvo;
      }
      projection = ig.utils.geo.getFittingProjection(prahaFeatures, 180).projection;
      path.projection(projection);
      z3$ = this.svg;
      z4$ = z3$.append('g').attr('class', 'praha');
      z4$.attr('transform', "translate(400, 0)");
      z5$ = z4$.selectAll('path').data(prahaFeatures).enter().append('path');
      z5$.attr('d', path);
      brnoFeatures = features.filter(function(it){
        var ref$;
        return (ref$ = it.properties.obvod) === 55 || ref$ === 58 || ref$ === 59 || ref$ === 60;
      });
      projection = ig.utils.geo.getFittingProjection(brnoFeatures, 80).projection;
      path.projection(projection);
      z6$ = this.svg;
      z7$ = z6$.append('g').attr('class', 'brno');
      z7$.attr('transform', "translate(380, 170)");
      z8$ = z7$.selectAll('path').data(brnoFeatures).enter().append('path');
      z8$.attr('d', path);
      ostravaFeatures = features.filter(function(it){
        var ref$;
        return (ref$ = it.properties.obvod) === 70 || ref$ === 71 || ref$ === 72;
      });
      projection = ig.utils.geo.getFittingProjection(ostravaFeatures, 107).projection;
      path.projection(projection);
      z9$ = this.svg;
      z10$ = z9$.append('g').attr('class', 'ostrava');
      z10$.attr('transform', "translate(500, 159)");
      z11$ = z10$.selectAll('path').data(ostravaFeatures).enter().append('path');
      z11$.attr('d', path);
      this.mandaty = this.svg.selectAll('path');
      for (i$ = 0, len$ = (ref$ = ['Praha', 'Brno', 'Ostrava']).length; i$ < len$; ++i$) {
        mesto = ref$[i$];
        z12$ = this.baseElement.append('div');
        z12$.attr('class', "sipka " + mesto.toLowerCase());
        z12$.append('span').html(mesto);
        z12$.append('div');
        results$.push(z12$);
      }
      return results$;
    };
    return Senat;
  }());
}).call(this);
