// Generated by LiveScript 1.6.0
(function(){
  var geoUtils;
  window.ig.utils.geo = geoUtils = {};
  geoUtils.getFittingProjection = function(features, width){
    var bounds, projection, ref$, height;
    bounds = geoUtils.getBounds(features);
    projection = geoUtils.getProjection(bounds, width);
    if (width === 180) {
      console.log(bounds);
    }
    ref$ = geoUtils.getDimensions(bounds, projection), width = ref$.width, height = ref$.height;
    return {
      width: width,
      height: height,
      projection: projection
    };
  };
  geoUtils.getBounds = function(features){
    var north, west, south, east, i$, len$, feature, ref$, ref1$, w, s, e, n;
    north = -Infinity;
    west = +Infinity;
    south = +Infinity;
    east = -Infinity;
    for (i$ = 0, len$ = features.length; i$ < len$; ++i$) {
      feature = features[i$];
      ref$ = d3.geo.bounds(feature), ref1$ = ref$[0], w = ref1$[0], s = ref1$[1], ref1$ = ref$[1], e = ref1$[0], n = ref1$[1];
      if (n > north) {
        north = n;
      }
      if (w < west) {
        west = w;
      }
      if (s < south) {
        south = s;
      }
      if (e > east) {
        east = e;
      }
    }
    return [[west, south], [east, north]];
  };
  geoUtils.getProjection = function(bounds, width){
    var ref$, west, south, east, north, displayedPercent, x$, projection;
    ref$ = bounds[0], west = ref$[0], south = ref$[1], ref$ = bounds[1], east = ref$[0], north = ref$[1];
    displayedPercent = Math.abs(west - east) / 360;
    x$ = projection = d3.geo.mercator();
    x$.scale(width / (Math.PI * 2 * displayedPercent));
    x$.center([west, north]);
    x$.translate([0, 0]);
    return x$;
  };
  geoUtils.getDimensions = function(bounds, projection){
    var ref$, west, south, east, north, x0, y0, x1, y1, width, height;
    ref$ = bounds[0], west = ref$[0], south = ref$[1], ref$ = bounds[1], east = ref$[0], north = ref$[1];
    ref$ = projection([west, north]), x0 = ref$[0], y0 = ref$[1];
    ref$ = projection([east, south]), x1 = ref$[0], y1 = ref$[1];
    width = x1 - x0;
    height = y1 - y0;
    return {
      width: width,
      height: height
    };
  };
}).call(this);
